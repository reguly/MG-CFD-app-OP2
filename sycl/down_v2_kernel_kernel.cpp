//
// auto-generated by op2.py
//

#include <math.h>
#include "const.h"

//user function
class down_v2_kernel_kernel;

//host stub function
void op_par_loop_down_v2_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9){

  int nargs = 10;
  op_arg args[10];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(19);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[19].name      = name;
  OP_kernels[19].count    += 1;


  int    ninds   = 5;
  int    inds[10] = {0,0,1,1,2,2,3,3,4,4};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: down_v2_kernel\n");
  }

  //get plan
  #ifdef OP_PART_SIZE_19
    int part_size = OP_PART_SIZE_19;
  #else
    int part_size = OP_part_size;
  #endif

  op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    op_plan *Plan = op_plan_get_stage(name,set,part_size,nargs,args,ninds,inds,OP_COLOR2);

    cl::sycl::buffer<double,1> *arg0_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg0.data_d);
    cl::sycl::buffer<double,1> *arg2_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg2.data_d);
    cl::sycl::buffer<double,1> *arg4_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg4.data_d);
    cl::sycl::buffer<double,1> *arg6_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg6.data_d);
    cl::sycl::buffer<double,1> *arg8_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg8.data_d);
    cl::sycl::buffer<int,1> *map0_buffer = static_cast<cl::sycl::buffer<int,1>*>((void*)arg0.map_data_d);
    cl::sycl::buffer<int,1> *map2_buffer = static_cast<cl::sycl::buffer<int,1>*>((void*)arg2.map_data_d);
    cl::sycl::buffer<int,1> *col_reord_buffer = static_cast<cl::sycl::buffer<int,1>*>((void*)Plan->col_reord);
    int set_size = set->size+set->exec_size;
    //execute plan
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      #ifdef OP_BLOCK_SIZE_19
      int nthread = OP_BLOCK_SIZE_19;
      #else
      int nthread = OP_block_size;
      #endif

      int start = Plan->col_offsets[0][col];
      int end = Plan->col_offsets[0][col+1];
      int nblocks = (end - start - 1)/nthread + 1;
      try {
      op2_queue->submit([&](cl::sycl::handler& cgh) {
        auto ind_arg0 = (*arg0_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);
        auto ind_arg1 = (*arg2_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);
        auto ind_arg2 = (*arg4_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);
        auto ind_arg3 = (*arg6_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);
        auto ind_arg4 = (*arg8_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);
        auto opDat0Map =  (*map0_buffer).template get_access<cl::sycl::access::mode::read>(cgh);
        auto opDat2Map =  (*map2_buffer).template get_access<cl::sycl::access::mode::read>(cgh);
        auto col_reord = (*col_reord_buffer).template get_access<cl::sycl::access::mode::read>(cgh);


        //user fun as lambda
        auto down_v2_kernel_gpu = [=]( 
              const double* coord2a,
              const double* coord2b,
              const double* coord1a,
              const double* coord1b,
              const double* residuals1a,
              const double* residuals1b,
              double* residuals1a_prolonged,
              double* residuals1b_prolonged,
              double* residuals1a_prolonged_wsum,
              double* residuals1b_prolonged_wsum) {
          
          
          
          
          
          
          
              double dx_a1a2 = coord2a[0] - coord1a[0];
              double dy_a1a2 = coord2a[1] - coord1a[1];
              double dz_a1a2 = coord2a[2] - coord1a[2];
              if (dx_a1a2 == 0.0 && dy_a1a2 == 0.0 && dz_a1a2 == 0.0) {
          
                  residuals1a_prolonged[VAR_DENSITY]        = residuals1a[VAR_DENSITY];
                  residuals1a_prolonged[VAR_MOMENTUM+0]     = residuals1a[VAR_MOMENTUM+0];
                  residuals1a_prolonged[VAR_MOMENTUM+1]     = residuals1a[VAR_MOMENTUM+1];
                  residuals1a_prolonged[VAR_MOMENTUM+2]     = residuals1a[VAR_MOMENTUM+2];
                  residuals1a_prolonged[VAR_DENSITY_ENERGY] = residuals1a[VAR_DENSITY_ENERGY];
                  *residuals1a_prolonged_wsum = 1.0;
              } else {
          
                  const double idist_a1a2 = 1.0/cl::sycl::sqrt(dx_a1a2*dx_a1a2 + dy_a1a2*dy_a1a2 + dz_a1a2*dz_a1a2);
                  residuals1a_prolonged[VAR_DENSITY]        += idist_a1a2*residuals1a[VAR_DENSITY];
                  residuals1a_prolonged[VAR_MOMENTUM+0]     += idist_a1a2*residuals1a[VAR_MOMENTUM+0];
                  residuals1a_prolonged[VAR_MOMENTUM+1]     += idist_a1a2*residuals1a[VAR_MOMENTUM+1];
                  residuals1a_prolonged[VAR_MOMENTUM+2]     += idist_a1a2*residuals1a[VAR_MOMENTUM+2];
                  residuals1a_prolonged[VAR_DENSITY_ENERGY] += idist_a1a2*residuals1a[VAR_DENSITY_ENERGY];
                  *residuals1a_prolonged_wsum += idist_a1a2;
          
                  double dx_b1a2 = coord1b[0] - coord2a[0];
                  double dy_b1a2 = coord1b[1] - coord2a[1];
                  double dz_b1a2 = coord1b[2] - coord2a[2];
          
                  const double idist_b1a2 = 1.0/cl::sycl::sqrt(dx_b1a2*dx_b1a2 + dy_b1a2*dy_b1a2 + dz_b1a2*dz_b1a2);
                  residuals1a_prolonged[VAR_DENSITY]        += idist_b1a2*residuals1b[VAR_DENSITY];
                  residuals1a_prolonged[VAR_MOMENTUM+0]     += idist_b1a2*residuals1b[VAR_MOMENTUM+0];
                  residuals1a_prolonged[VAR_MOMENTUM+1]     += idist_b1a2*residuals1b[VAR_MOMENTUM+1];
                  residuals1a_prolonged[VAR_MOMENTUM+2]     += idist_b1a2*residuals1b[VAR_MOMENTUM+2];
                  residuals1a_prolonged[VAR_DENSITY_ENERGY] += idist_b1a2*residuals1b[VAR_DENSITY_ENERGY];
                  *residuals1a_prolonged_wsum += idist_b1a2;
              }
          
              double dx_b1b2 = coord2b[0] - coord1b[0];
              double dy_b1b2 = coord2b[1] - coord1b[1];
              double dz_b1b2 = coord2b[2] - coord1b[2];
              if (dx_b1b2 == 0.0 && dy_b1b2 == 0.0 && dz_b1b2 == 0.0) {
          
                  residuals1b_prolonged[VAR_DENSITY]        = residuals1b[VAR_DENSITY];
                  residuals1b_prolonged[VAR_MOMENTUM+0]      = residuals1b[VAR_MOMENTUM+0];
                  residuals1b_prolonged[VAR_MOMENTUM+1]      = residuals1b[VAR_MOMENTUM+1];
                  residuals1b_prolonged[VAR_MOMENTUM+2]      = residuals1b[VAR_MOMENTUM+2];
                  residuals1b_prolonged[VAR_DENSITY_ENERGY] = residuals1b[VAR_DENSITY_ENERGY];
                  *residuals1b_prolonged_wsum = 1.0;
              } else {
          
                  const double idist_b1b2 = 1.0/cl::sycl::sqrt(dx_b1b2*dx_b1b2 + dy_b1b2*dy_b1b2 + dz_b1b2*dz_b1b2);
                  residuals1b_prolonged[VAR_DENSITY]        += idist_b1b2*residuals1b[VAR_DENSITY];
                  residuals1b_prolonged[VAR_MOMENTUM+0]     += idist_b1b2*residuals1b[VAR_MOMENTUM+0];
                  residuals1b_prolonged[VAR_MOMENTUM+1]     += idist_b1b2*residuals1b[VAR_MOMENTUM+1];
                  residuals1b_prolonged[VAR_MOMENTUM+2]     += idist_b1b2*residuals1b[VAR_MOMENTUM+2];
                  residuals1b_prolonged[VAR_DENSITY_ENERGY] += idist_b1b2*residuals1b[VAR_DENSITY_ENERGY];
                  *residuals1b_prolonged_wsum += idist_b1b2;
          
                  double dx_a1b2 = coord1a[0] - coord2b[0];
                  double dy_a1b2 = coord1a[1] - coord2b[1];
                  double dz_a1b2 = coord1a[2] - coord2b[2];
          
                  const double idist_a1b2 = 1.0/cl::sycl::sqrt(dx_a1b2*dx_a1b2 + dy_a1b2*dy_a1b2 + dz_a1b2*dz_a1b2);
                  residuals1b_prolonged[VAR_DENSITY]        += idist_a1b2*residuals1b[VAR_DENSITY];
                  residuals1b_prolonged[VAR_MOMENTUM+0]     += idist_a1b2*residuals1b[VAR_MOMENTUM+0];
                  residuals1b_prolonged[VAR_MOMENTUM+1]     += idist_a1b2*residuals1b[VAR_MOMENTUM+1];
                  residuals1b_prolonged[VAR_MOMENTUM+2]     += idist_a1b2*residuals1b[VAR_MOMENTUM+2];
                  residuals1b_prolonged[VAR_DENSITY_ENERGY] += idist_a1b2*residuals1b[VAR_DENSITY_ENERGY];
                  *residuals1b_prolonged_wsum += idist_a1b2;
              }
          
          };
          
        auto kern = [=](cl::sycl::nd_item<1> item) {
          int tid = item.get_global_linear_id();
          if (tid + start < end) {
            int n = col_reord[tid + start];
            //initialise local variables
            int map0idx;
            int map1idx;
            int map2idx;
            int map3idx;
            map0idx = opDat0Map[n + set_size * 0];
            map1idx = opDat0Map[n + set_size * 1];
            map2idx = opDat2Map[n + set_size * 0];
            map3idx = opDat2Map[n + set_size * 1];

            //user-supplied kernel call
            down_v2_kernel_gpu(&ind_arg0[map0idx*3],
                   &ind_arg0[map1idx*3],
                   &ind_arg1[map2idx*3],
                   &ind_arg1[map3idx*3],
                   &ind_arg2[map2idx*5],
                   &ind_arg2[map3idx*5],
                   &ind_arg3[map0idx*5],
                   &ind_arg3[map1idx*5],
                   &ind_arg4[map0idx*1],
                   &ind_arg4[map1idx*1]);
          }

        };
        cgh.parallel_for<class down_v2_kernel_kernel>(cl::sycl::nd_range<1>(nthread*nblocks,nthread), kern);
      });
      }catch(cl::sycl::exception const &e) {
      std::cout << e.what() << std::endl;exit(-1);
      }

    }
    OP_kernels[19].transfer  += Plan->transfer;
    OP_kernels[19].transfer2 += Plan->transfer2;
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  op2_queue->wait();
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[19].time     += wall_t2 - wall_t1;
}
