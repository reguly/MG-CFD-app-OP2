//
// auto-generated by op2.py
//

#include <math.h>
#include "const.h"

//user function
class up_kernel_kernel;

//host stub function
void op_par_loop_up_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  int nargs = 3;
  op_arg args[3];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(16);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[16].name      = name;
  OP_kernels[16].count    += 1;


  int    ninds   = 2;
  int    inds[3] = {-1,0,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: up_kernel\n");
  }

  op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    //set SYCL execution parameters
    #ifdef OP_BLOCK_SIZE_16
      int nthread = OP_BLOCK_SIZE_16;
    #else
      int nthread = OP_block_size;
    #endif

    cl::sycl::buffer<double,1> *arg1_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg1.data_d);
    cl::sycl::buffer<int,1> *arg2_buffer = static_cast<cl::sycl::buffer<int,1>*>((void*)arg2.data_d);
    cl::sycl::buffer<int,1> *map1_buffer = static_cast<cl::sycl::buffer<int,1>*>((void*)arg1.map_data_d);
    cl::sycl::buffer<double,1> *arg0_buffer = static_cast<cl::sycl::buffer<double,1>*>((void*)arg0.data_d);
    int set_size = set->size+set->exec_size;
    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        try {
        op2_queue->submit([&](cl::sycl::handler& cgh) {
          auto ind_arg0 = (*arg1_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);
          auto ind_arg1 = (*arg2_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);
          auto opDat1Map =  (*map1_buffer).template get_access<cl::sycl::access::mode::read>(cgh);

          auto arg0 = (*arg0_buffer).template get_access<cl::sycl::access::mode::read_write>(cgh);


          //user fun as lambda
          auto up_kernel_gpu = [=]( 
                const double* variable,
                double* variable_above,
                int* up_scratch) {
                variable_above[VAR_DENSITY]        += variable[VAR_DENSITY];
                variable_above[VAR_MOMENTUM+0]     += variable[VAR_MOMENTUM+0];
                variable_above[VAR_MOMENTUM+1]     += variable[VAR_MOMENTUM+1];
                variable_above[VAR_MOMENTUM+2]     += variable[VAR_MOMENTUM+2];
                variable_above[VAR_DENSITY_ENERGY] += variable[VAR_DENSITY_ENERGY];
                *up_scratch += 1;
            
            };
            
          auto kern = [=](cl::sycl::nd_item<1> item) {
            double arg1_l[5];
            for ( int d=0; d<5; d++ ){
              arg1_l[d] = ZERO_double;
            }
            int arg2_l[1];
            for ( int d=0; d<1; d++ ){
              arg2_l[d] = ZERO_int;
            }
            int tid = item.get_global_linear_id();
            if (tid + start < end) {
              int n = tid+start;
              //initialise local variables
              int map1idx;
              map1idx = opDat1Map[n + set_size * 0];

              //user-supplied kernel call
              up_kernel_gpu(&arg0[n*5],
              arg1_l,
              arg2_l);
              {cl::sycl::atomic<double> a{cl::sycl::global_ptr<double>{&ind_arg0[0+map1idx*5]}}; a.fetch_add(arg1_l[0]);}
              {cl::sycl::atomic<double> a{cl::sycl::global_ptr<double>{&ind_arg0[1+map1idx*5]}}; a.fetch_add(arg1_l[1]);}
              {cl::sycl::atomic<double> a{cl::sycl::global_ptr<double>{&ind_arg0[2+map1idx*5]}}; a.fetch_add(arg1_l[2]);}
              {cl::sycl::atomic<double> a{cl::sycl::global_ptr<double>{&ind_arg0[3+map1idx*5]}}; a.fetch_add(arg1_l[3]);}
              {cl::sycl::atomic<double> a{cl::sycl::global_ptr<double>{&ind_arg0[4+map1idx*5]}}; a.fetch_add(arg1_l[4]);}
              {cl::sycl::atomic<int> a{cl::sycl::global_ptr<int>{&ind_arg1[0+map1idx*1]}}; a.fetch_add(arg2_l[0]);}
            }

          };
          cgh.parallel_for<class up_kernel_kernel>(cl::sycl::nd_range<1>(nthread*nblocks,nthread), kern);
        });
        }catch(cl::sycl::exception const &e) {
        std::cout << e.what() << std::endl;exit(-1);
        }

      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  op2_queue->wait();
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[16].time     += wall_t2 - wall_t1;
}
